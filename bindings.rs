/* automatically generated by rust-bindgen */

pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 33;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const __TIMESIZE: u32 = 64;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const WU_OK: u32 = 0;
pub const WU_ERROR: u32 = 1;
pub const WU_OUT_OF_MEMORY: u32 = 2;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type size_t = ::std::os::raw::c_ulong;
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[test]
fn bindgen_test_layout_max_align_t() {
    assert_eq!(
        ::std::mem::size_of::<max_align_t>(),
        32usize,
        concat!("Size of: ", stringify!(max_align_t))
    );
    assert_eq!(
        ::std::mem::align_of::<max_align_t>(),
        16usize,
        concat!("Alignment of ", stringify!(max_align_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<max_align_t>())).__clang_max_align_nonce1 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<max_align_t>())).__clang_max_align_nonce2 as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce2)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WuClient {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Wu {
    _unused: [u8; 0],
}
pub type WuErrorFn = ::std::option::Option<
    unsafe extern "C" fn(err: *const ::std::os::raw::c_char, userData: *mut ::std::os::raw::c_void),
>;
pub type WuWriteFn = ::std::option::Option<
    unsafe extern "C" fn(
        data: *const u8,
        length: size_t,
        client: *const WuClient,
        userData: *mut ::std::os::raw::c_void,
    ),
>;
pub const WuEventType_WuEvent_BinaryData: WuEventType = 0;
pub const WuEventType_WuEvent_ClientJoin: WuEventType = 1;
pub const WuEventType_WuEvent_ClientLeave: WuEventType = 2;
pub const WuEventType_WuEvent_TextData: WuEventType = 3;
pub type WuEventType = u32;
pub const WuSDPStatus_WuSDPStatus_Success: WuSDPStatus = 0;
pub const WuSDPStatus_WuSDPStatus_InvalidSDP: WuSDPStatus = 1;
pub const WuSDPStatus_WuSDPStatus_MaxClients: WuSDPStatus = 2;
pub const WuSDPStatus_WuSDPStatus_Error: WuSDPStatus = 3;
pub type WuSDPStatus = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WuEvent {
    pub type_: WuEventType,
    pub client: *mut WuClient,
    pub data: *const u8,
    pub length: i32,
}
#[test]
fn bindgen_test_layout_WuEvent() {
    assert_eq!(
        ::std::mem::size_of::<WuEvent>(),
        32usize,
        concat!("Size of: ", stringify!(WuEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<WuEvent>(),
        8usize,
        concat!("Alignment of ", stringify!(WuEvent))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WuEvent>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WuEvent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WuEvent>())).client as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WuEvent),
            "::",
            stringify!(client)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WuEvent>())).data as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(WuEvent),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WuEvent>())).length as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(WuEvent),
            "::",
            stringify!(length)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDPResult {
    pub status: WuSDPStatus,
    pub client: *mut WuClient,
    pub sdp: *const ::std::os::raw::c_char,
    pub sdpLength: i32,
}
#[test]
fn bindgen_test_layout_SDPResult() {
    assert_eq!(
        ::std::mem::size_of::<SDPResult>(),
        32usize,
        concat!("Size of: ", stringify!(SDPResult))
    );
    assert_eq!(
        ::std::mem::align_of::<SDPResult>(),
        8usize,
        concat!("Alignment of ", stringify!(SDPResult))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SDPResult>())).status as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDPResult),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SDPResult>())).client as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SDPResult),
            "::",
            stringify!(client)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SDPResult>())).sdp as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SDPResult),
            "::",
            stringify!(sdp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SDPResult>())).sdpLength as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SDPResult),
            "::",
            stringify!(sdpLength)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WuAddress {
    pub host: u32,
    pub port: u16,
}
#[test]
fn bindgen_test_layout_WuAddress() {
    assert_eq!(
        ::std::mem::size_of::<WuAddress>(),
        8usize,
        concat!("Size of: ", stringify!(WuAddress))
    );
    assert_eq!(
        ::std::mem::align_of::<WuAddress>(),
        4usize,
        concat!("Alignment of ", stringify!(WuAddress))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WuAddress>())).host as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WuAddress),
            "::",
            stringify!(host)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WuAddress>())).port as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(WuAddress),
            "::",
            stringify!(port)
        )
    );
}
extern "C" {
    pub fn WuCreate(
        host: *const ::std::os::raw::c_char,
        port: *const ::std::os::raw::c_char,
        maxClients: ::std::os::raw::c_int,
        wu: *mut *mut Wu,
    ) -> i32;
}
extern "C" {
    pub fn WuDestroy(wu: *mut Wu);
}
extern "C" {
    pub fn WuUpdate(wu: *mut Wu, evt: *mut WuEvent) -> i32;
}
extern "C" {
    pub fn WuSendText(
        wu: *mut Wu,
        client: *mut WuClient,
        text: *const ::std::os::raw::c_char,
        length: i32,
    ) -> i32;
}
extern "C" {
    pub fn WuSendBinary(wu: *mut Wu, client: *mut WuClient, data: *const u8, length: i32) -> i32;
}
extern "C" {
    pub fn WuReportError(wu: *mut Wu, error: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn WuRemoveClient(wu: *mut Wu, client: *mut WuClient);
}
extern "C" {
    pub fn WuClientSetUserData(client: *mut WuClient, user: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn WuClientGetUserData(client: *const WuClient) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn WuExchangeSDP(wu: *mut Wu, sdp: *const ::std::os::raw::c_char, length: i32)
        -> SDPResult;
}
extern "C" {
    pub fn WuHandleUDP(wu: *mut Wu, remote: *const WuAddress, data: *const u8, length: i32);
}
extern "C" {
    pub fn WuSetUDPWriteFunction(wu: *mut Wu, write: WuWriteFn);
}
extern "C" {
    pub fn WuSetUserData(wu: *mut Wu, userData: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn WuSetErrorCallback(wu: *mut Wu, callback: WuErrorFn);
}
extern "C" {
    pub fn WuClientGetAddress(client: *const WuClient) -> WuAddress;
}
extern "C" {
    pub fn WuFindClient(wu: *const Wu, address: WuAddress) -> *mut WuClient;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WuHost {
    _unused: [u8; 0],
}
extern "C" {
    pub fn WuHostCreate(
        hostAddr: *const ::std::os::raw::c_char,
        port: *const ::std::os::raw::c_char,
        maxClients: i32,
        host: *mut *mut WuHost,
    ) -> i32;
}
extern "C" {
    pub fn WuHostDestroy(host: *mut WuHost);
}
extern "C" {
    pub fn WuHostServe(host: *mut WuHost, evt: *mut WuEvent, timeout: ::std::os::raw::c_int)
        -> i32;
}
extern "C" {
    pub fn WuHostRemoveClient(wu: *mut WuHost, client: *mut WuClient);
}
extern "C" {
    pub fn WuHostSendText(
        host: *mut WuHost,
        client: *mut WuClient,
        text: *const ::std::os::raw::c_char,
        length: i32,
    ) -> i32;
}
extern "C" {
    pub fn WuHostSendBinary(
        host: *mut WuHost,
        client: *mut WuClient,
        data: *const u8,
        length: i32,
    ) -> i32;
}
extern "C" {
    pub fn WuHostSetErrorCallback(host: *mut WuHost, callback: WuErrorFn);
}
extern "C" {
    pub fn WuHostFindClient(host: *const WuHost, address: WuAddress) -> *mut WuClient;
}
